generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  bio           String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  websites      Website[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Website {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  published   Boolean  @default(false)
  customDomain String? @unique
  domainVerified Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  pages       Page[]
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Page {
  id          String      @id @default(cuid())
  title       String
  path        String
  description String?
  isHomePage  Boolean     @default(false)
  published   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  websiteId   String
  components  Component[]
  website     Website     @relation(fields: [websiteId], references: [id], onDelete: Cascade)

  @@unique([websiteId, path])
}

model Component {
  id         String      @id @default(cuid())
  type       String
  position   Int         @default(0)
  properties String?
  pageId     String
  parentId   String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  parent     Component?  @relation("ComponentToComponent", fields: [parentId], references: [id])
  children   Component[] @relation("ComponentToComponent")
  page       Page        @relation(fields: [pageId], references: [id], onDelete: Cascade)
}
